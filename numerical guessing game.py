                                           #‚úÖüëæ–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å randomüëæ‚úÖ
from random import *
import time
count = 0


                                                   #‚úÖüëæ–ü—Ä–∏–≤–µ—Ç—Å–≤–∏–µüëæ‚úÖ
def privet():
            print(choice(['ü§ñ–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ —á–∏—Å–ª–æ–≤–æ–π —É–≥–∞–¥–∞–π–∫–µü§ñ', 'üëΩ–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ–≤—É—é —É–≥–∞–¥–∞–π–∫—É!üëΩ', 'ü§†–†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ —á–∏—Å–ª–æ–≤–æ–π —É–≥–∞–¥–∞–π–∫–µü§†']))

                                                  #‚úÖüëæ–Ω–∞–±–æ—Ä —Ñ—Ä–∞–∑üëæ‚úÖ

nabor_true = ['–í—ã —É–≥–∞–¥–∞–ª–∏!‚úÖ', 'üò∫–ú–æ–ª–æ–¥—Ü—ã! –í—ã —É–≥–∞–¥–∞–ª–∏ ', '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã —É–≥–∞–¥–∞–ª–∏üë©‚Äçüéì', 'üòÄ–û–≥–æ! –£–≥–∞–¥–∞–ª–∏', 'ü§ì–Ø –≤–∞—Å –ø–æ–∑–¥—Ä–∞–≤–ª—é, –≤—ã —É–≥–∞–¥–∞–ª–∏']
nabor_false = ['ü§¶‚Äç‚ôÇÔ∏è–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏', '–û—á–µ–Ω—å –∂–∞–ª—å, –Ω–µ —É–≥–∞–¥–∞–ª–∏', 'üë®‚Äçüè´–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏', '–ß—Ç–æ-–∂ –Ω–µ —É–≥–∞–¥–∞–ª–∏..', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –≤—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏.']
nabor_bol_false = ['üò¨–ß–∏—Å–ª–æ –±–æ–ª—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ, –Ω–µ —É–≥–∞–¥–∞–ª–∏..', 'üëÄ‚Äç–î–∞–ª–µ–∫–æ —É—à–ª–∏, –Ω–æ –Ω–µ —É–≥–∞–¥–∞–ª–∏', 'üë∫–í—ã—à–µ –≥–æ—Ä—ã, –Ω–µ —É–≥–∞–¥–∞–ª–∏', '–î–∞–ª–µ–∫–æ–≤–∞—Ç–æ..']
nabor_men_false = ['üí©–ß–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ, –Ω–µ —É–≥–∞–¥–∞–ª–∏...', 'ü§ï–õ–µ—Ç–∏—Ç–µ –Ω–∏–∑–∫–æ..', 'üëé–ù–µ —É–≥–∞–¥–∞–ª–∏, —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ!', 'üíÄ–Ø –¥—É–º–∞—é —á—Ç–æ —ç—Ç–æ –º–∞–ª–æ..']


                                              #‚úÖüëæ–æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –æ—Ç–≤–µ—Ç–æ–º.üëæ‚úÖ
def chicl():
    count = 0
    privet()

    while True:
        g = randint(1, 101)
        ch = input('üßõ‚Äç‚ôÄÔ∏è–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100, –∞ —è –µ–≥–æ –∑–∞–≥–∞–¥–∞—é:\n')
        print('–ó–∞–≥–∞–¥—ã–≤–∞—é —á–∏—Å–ª–æ...ü§î')
        time.sleep(2)
        if not is_nub(ch):
            print('–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æüïµÔ∏è‚Äç‚ôÇÔ∏è')
            print('–ê –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Å–µ-—Ç–∞–∫–∏ –≤–≤–µ–¥–µ–º —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100?üò°')
            continue
        ch = int(ch)

        if ch == g:
            print(choice(nabor_true))
            print('–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ:', g)
        elif ch > g:
            print(choice(nabor_men_false))
            print('–∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ:', g)
        elif ch < g:
            print(choice(nabor_bol_false))
            print('–∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ:', g)
        count += 1
        print('–ø–æ–ø—ã—Ç–∫–∞ #', count)
        return povtor()
        break


                                              #‚úÖüëæ–∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É—Ä–∞–∫–∞üëæ‚úÖ


def is_nub(i):
    if i.isdigit() and 1 <= int(i) <= 100:
        return True
    else:
        return False





                                               #‚úÖüëæ–ø–æ–≤—Ç–æ—Ä –µ—Å–ª–∏ —É–∂–µ —Å—Å—ã–≥—Ä–∞–ªüëæ‚úÖ
def povtor():
    povtor = input('–•–æ—Ç–∏—Ç–µ —Å—Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? [–¥–∞/–Ω–µ—Ç]:\n')
    if povtor == '–¥–∞':
        print('üïô–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —á–∏—Å–ª–æ–≤—É—é —É–≥–∞–¥–∞–π–∫—É...üïö')
        time.sleep(3)
        chicl()
    elif povtor == '–Ω–µ—Ç':
        print('–¢–æ–≥–¥–∞ –¥–æ –≤—Å—Ç—Ä–µ—á–∏')






chicl()

print('*'*100, ' üòé–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏–≥—Ä–∞–ª–∏ –≤ —á–∏—Å–ª–æ–≤—É—é —É–≥–∞–¥–∞–π–∫—É. –ï—â–µ —É–≤–∏–¥–∏–º—Å—è...', '*'*100, sep='\n')